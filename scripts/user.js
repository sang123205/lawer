'use strict';
module.exports = {
  config: {
    name: 'user',
    ver: '1.0.0',
    role: 3,
    author: ['Lawer Team'],
    description: 'T√¨m ki·∫øm/c·∫•m/g·ª° c·∫•m ng∆∞·ªùi d√πng.',
    location: __filename,
    timestamps: 0
  },
  onMessage: out
};

async function out({ event, api, message, Threads, args, Users, global, Config, is }) {
  const moment = require("moment-timezone");
  const prefix = (await Threads.getData(event.threadID)).prefix || Config.prefix;
  var guide = `
${prefix}user [find | -f | search | -s] <t√™n c·∫ßn t√¨m>: t√¨m ki·∫øm ng∆∞·ªùi d√πng trong d·ªØ li·ªáu bot b·∫±ng t√™n.\n
${prefix}user [ban | -b] [<id> | @tag | reply tin nh·∫Øn] <reason>: ƒë·ªÉ c·∫•m ng∆∞·ªùi d√πng mang id <id> ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c tag ho·∫∑c ng∆∞·ªùi g·ª≠i c·ªßa tin nh·∫Øn ƒë∆∞·ª£c reply s·ª≠ d·ª•ng bot.\n
${prefix}user unban [<id> | @tag | reply tin nh·∫Øn]: ƒë·ªÉ b·ªè c·∫•m ng∆∞·ªùi d√πng s·ª≠ d·ª•ng bot.`;
  const type = args[0];
  if (type == "help") return message.send(guide);
  //---> Code <---//
  if (["find", "search", "-f", "-s"].includes(type)) {
    var allUser = await Users.getKey(["id", "name"]);
    var arrayreturn = [];
    var msg = "";
    var length = 0;
    const keyword = args[1];
    if (!keyword) return message.reply(`Nh·∫≠p t√™n c·∫ßn t√¨m ki·∫øm`);
    for (let i in allUser) {
      if (allUser[i].name.toLowerCase().includes(keyword.toLowerCase())) {
        length++;
        msg += `\n‚ï≠Name: ${allUser[i].name}\n‚ï∞UID: ${allUser[i].id}\n`;
      }
    }
    return message.reply(length == 0 ? `‚ùåKh√¥ng c√≥ k·∫øt qu·∫£ t√¨m ki·∫øm n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a ${keyword}` : `üîéC√≥ ${length} k·∫øt qu·∫£ ph√π h·ª£p cho t·ª´ kh√≥a "${keyword}":\n${msg}`);
  } else if (["ban", "-b"].includes(type)) {
    let id, reason;
    if (event.type == "message_reply") {
      id = event.messageReply.senderID;
      reason = args.slice(1).join(" ");
    } else if (event.mentions) {
      let { mentions } = event;
      if (!Object.keys(mentions)[0]) {
        reason = args.slice(2).join(" ");
      } else reason = args.slice(3).join(" ");
    } else return;
    //console.log(id + " | ", reason)
    if (!id) return message.reply("ID c·ªßa ng∆∞·ªùi c·∫ßn ban kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng, vui l√≤ng nh·∫≠p id ho·∫∑c tag ho·∫∑c reply tin nh·∫Øn c·ªßa 1 ng∆∞·ªùi theo c√∫ ph√°p user ban <id> <l√Ω do>");
    if (!reason) return message.reply("L√Ω do c·∫•m ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng, vui l√≤ng so·∫°n tin nh·∫Øn theo c√∫ ph√°p user ban <id> <l√Ω do>");
    let dataUser = (await Users.getData(id.toString()));
    if (dataUser.id != id) return message.reply(`Ng∆∞·ªùi d√πng mang ID: ${id} kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu bot`);
    if (dataUser.banned.status == true) return message.reply(`Ng∆∞·ªùi d√πng mang id ${id} ƒë√£ b·ªã c·∫•m t·ª´ tr∆∞·ªõc`);
    reason = reason.replace(/\s+/g, ' ');
    const name = dataUser.name;
    const banned = dataUser.banned;
    banned.status = true;
    banned.reason = reason,
      banned.time = moment.tz("Asia/Ho_Chi_Minh").format("HH:mm:ss | DD/MM/YYYY")
    await Users.setData(id, {
      banned: banned
    });
    return message.reply(`ƒê√£ c·∫•m ng∆∞·ªùi d√πng mang ID: ${id} | ${name} s·ª≠ d·ª•ng bot v·ªõi l√Ω do: ${reason}`);
  } else if (["unban", "-u"].includes(type)) {
    let id;
    if (event.type == "message_reply") {
      id = event.messageReply.senderID;
    } else if (event.mentions) {
      const { mentions } = event;
      id = Object.keys(mentions)[0] || args[1];
    } else return;
    if (!id) return message.reply("ID c·ªßa ng∆∞·ªùi c·∫ßn ban kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng, vui l√≤ng nh·∫≠p id ho·∫∑c tag ho·∫∑c teply tin nh·∫Øn c·ªßa 1 ng∆∞·ªùi theo c√∫ ph√°p user ban <id> <l√Ω do>");
    let dataUser = (await Users.getData(id.toString()));
    if (dataUser.id != id) return message.reply(`Ng∆∞·ªùi d√πng mang ID: ${id} kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu bot`);
    if (dataUser.banned.status != true) return message.reply(`Ng∆∞·ªùi d√πng mang ID: ${id} kh√¥ng b·ªã ban t·ª´ tr∆∞·ªõc`);
    const name = dataUser.name;
    const banned = dataUser.banned;
    banned.status = false;
    banned.reason = null,
      banned.time = null
    await Users.setData(id, {
      banned: banned
    });
    message.reply(`ƒê√£ b·ªè c·∫•m ng∆∞·ªùi d√πng mang id ${id} | ${name}, hi·ªán t·∫°i ng∆∞·ªùi n√†y c√≥ th·ªÉ s·ª≠ d·ª•ng bot`);
  } else return;
}